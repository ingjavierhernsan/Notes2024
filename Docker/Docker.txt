1.- INSTALL DOCKER ENGINE
2.- UNINSTALL DOCKER ENGINE
3.- DOWNLOAD A DOCKER IMAGE
4.- RUN A DOCKER IMAGE
5.- LIST THE IMAGE DOWNLOADED
6.- LIST THE RUNNING IMAGE
7.- START A CONTAINER THAT WAS STOP
8.- CHECK THE LOGS OF A CONTAINER
9.- EXECUTE A COMMAND IN A RUNNING CONTAINER
10.- STOP A CONTAINER
11.- CREATE A DOCKER FILE
12.- BUILD A CONTINER WITH THE DOCKER FILE
13.- USAR PUERTOS EN DOCKER
14.- VOLUMENES EN DOCKER
15.- METER LOS CAMBIOS HECHOS EN LA IMAGEN
16.- SUBIR LA IMAGEN AL REPOSITORIO DE DOCKER
17.- CREAR UNA RED DE CONTENEDORES

1.- INSTALL DOCKER ENGINE
Run the following command to uninstall all conflicting packages:

for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done

Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.

1.- Set up Docker's apt repository:

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

2.- Install the Docker packages:

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

3.- Verify that the Docker Engine installation is successful by running the hello-world image:

sudo docker run hello-world

2.- UNINSTALL DOCKER ENGINE
Uninstall Docker Engine
1.- Uninstall the Docker Engine, CLI, containerd, and Docker Compose packages:

sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

2.- Images, containers, volumes, or custom configuration files on your host aren't automatically removed. To delete all images, containers, and volumes:

sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd

3.- DOWNLOAD A DOCKER IMAGE
docker pull imageName

docker pull postgres

An especific version:
docket pull postgres:9.6

4.- RUN A DOCKER IMAGE
When you use the parameter run and you don't have the image, docket download and run the image.

docker run imageName

docker run postgres

An especific version:
docket run postgres:9.6

Run in background
docker run -d postgres

d.- Detach

5.- LIST THE IMAGE DOWNLOADED
docker images

6.- LIST THE RUNNING CONTAINERS
docker ps

docker ps -a

7.- START A CONTAINER THAT WAS STOP
docker start dockerId

8.- CHECK THE LOGS OF A CONTAINER
docker logs containerId

docker logs containerName

Watch the creation of the log:
docker logs -f containerName

9.- EXECUTE A COMMAND IN A RUNNING CONTAINER
docker exec -it containerId sh

It will appear a #

i.- Create a interactive session.
t.- Emulate a terminal.
sh.- Shell.

10.- STOP A CONTAINER
docker stop containerId

docker stop containerId containerId

11.- CREATE A DOCKER FILE
Name the file: Dockerfile

The first line:
FROM node:12.22.1-alpine3.11
It is which image we are going to get.

WORKDIR /app
It indicates to docker that has to create the directory and it is where the image will work.

COPY . .
This indicate to docker to copy the container of the image to the directory app.

RUN yarn install --production
Indicate to compile the content of node.

Final line:
CMD ["node", "/app/src/index.js"]
Indicate that when run this container the program (node) and file (index.js) will run.

FROM node:12.22.1-alpine3.11

WORKDIR /app
COPY . .
RUN yarn install --production

CMD ["node", "/app/src/index.js"]

There is ENTRYPOINT, this allows you to enter an argument.

12.- BUILD A CONTINER WITH THE DOCKER FILE
docker build .

With a tag:
docker build -t countainerTag .

13.- USAR PUERTOS EN DOCKER
docker run -p 3000:3000 containerName

-p 3000:3000.- Sirve para exponer el puerto 3000

Tambien se pueden combinar parametros: -dp
Expone el puerto y corre en background.

14.- VOLUMENES EN DOCKER
docker run -d -v /Users/kbs/ejemplo-docker/app/etc:/etc/todos -p 3000:3000 containerName

Se guarda la informacion creada en el contenedor. Si se para el contenedor la informacion ya quedo guardada en la ruta indicada, cuando se corra de nuevo el contendor se podra revisar de nuevo la informacion. Se debe correr con los parametros indicados en la sentencia anterior.

/Users/kbs/ejemplo-docker/app/etc:/etc/todos 
/Users/kbs/ejemplo-docker/app/etc es la ruta donde se guarda la informacion en la computadora
:/etc/todos es la ruta que se manejara en el contenedor

La informacion puede ser modificada en la ruta indicada desde la computadora aun que este corriendo el contenedor, estos cambios se podran visualizar en el contenedor corriendo.

15.- METER LOS CAMBIOS HECHOS EN LA IMAGEN
docker build -t containerName:v2 .

:v2 es un tag para indicar que no es la imagen original y es una version con alguna modificacion.

16.- SUBIR LA IMAGEN AL REPOSITORIO DE DOCKER
Para subir al repositorio docker recomienda poner el nombre del usuario al inicio del nombre del contenedor.

Volver a tagear una imagen:
docker tag imagenId user/containernomber:v1

Crear una cuenta en docker hub.
Logearte:
docker login
docker push user/containerName:v1

17.- CREAR UNA RED DE CONTENEDORES
Crear una nueva red:
docker network create todo-app

Correr un contenedor dentro de la red creada:
docker run -d --network todo-app --network-alias mysql -v todo-mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=todos mysql:5.7

docker exec -it containerId mysql -p

mysql -p va correr dentro del containerId

Conectar otro contenedor a la red creada:
docker run -it --network todo-app containerName

Este tipo de sentencias con parametros se utiliza cuando se ocupa pasar ciertos parametros al contenedor
docker run -dp 3000:3000 --network todo-app -e MYSQL_HOST=mysql -e MYSQL_USER=root -e MYSQL_PASSWORD=secret -e MYSQL_DB=todos containerName:v2

